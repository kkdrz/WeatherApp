<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="928dfb13-c060-4575-8ffa-cf7c4cbfa30c" activeEnvironment="Default" name="REST Project 1" resourceRoot="" soapui-version="5.3.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="3d954827-c318-4313-9c9d-1e172f24d8f0" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://localhost:8080" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://WW351732:8089/</con:endpoint><con:endpoint>http://localhost:8080</con:endpoint></con:endpoints><con:resource name="Weather" path="/weather" id="7872c51a-2396-490b-a544-b0c09a6d06bb"><con:settings/><con:parameters/><con:resource name="{city}" path="{city}" id="0df1ce22-7dca-4ee9-baea-4c0cf2201fbf"><con:settings/><con:parameters><con:parameter><con:name>city</con:name><con:value>city</con:value><con:style>TEMPLATE</con:style><con:default>city</con:default></con:parameter></con:parameters><con:method name="Method 1" id="ff98b054-479a-4bb6-996d-09b3ea6fb0ba" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:wroc="http://localhost/weather/Wroclaw">wroc:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:request name="GET CityWeather by city name" id="87636551-dcfb-4291-8de2-7c4b5dd1fa08" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/weather/Wroclaw%3B%20Bydgoszcz</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="city" value="Wroclaw" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>city</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:method name="[/weather/]" id="030a74af-8010-42dd-a010-75972f306220" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element>Response</con:element></con:representation><con:request name="GET all cities weathers" id="4f040f33-c7dc-46a8-a079-5297687b6099" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/weather</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:request></con:method></con:resource></con:interface><con:testSuite id="cf3d5d47-a456-46c6-a3eb-39e881e8b234" name="TestSuite"><con:description>TestSuite generated for REST Service [http://localhost:8080]</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="344870c9-2a30-43e4-a774-b548cae3b7d8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="/weather - test for all supported cities" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Expect found weather for all supported cities" id="e60dfa7e-3d65-48fd-b332-f1472c1b9843"><con:settings/><con:config service="http://localhost:8080" resourcePath="/weather" methodName="[/weather/]" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Expect found weather for all supported cities" id="4f040f33-c7dc-46a8-a079-5297687b6099" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/weather</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="69b214d7-aaf3-42b3-b1bf-c3939da4cd5c" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="aa48d182-61f0-42f8-a8c1-9d7f8ed26d01" name="XPath Match"><con:configuration><path>count(*/*)</path><content>5</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XQuery Match" id="ab6dac34-b3ea-43ad-90bc-3039d3945b16" name="XQuery Match"><con:configuration><path>&lt;Result>
{
for $x in //*/*/location
return $x
}
&lt;/Result></path><content><![CDATA[<Result>
  <location>Wroclaw, Poland</location>
  <location>Bialystok, Poland</location>
  <location>Czestochowa, Poland</location>
  <location>Bielsko-Biala, Poland</location>
  <location>Goleniow, Poland</location>
</Result>]]></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:loadTest id="16934fed-ad99-4bf7-bc20-81eac4f851e0" name="LoadTest all supported cities"><con:settings><con:setting id="HttpSettings@close-connections">false</con:setting></con:settings><con:threadCount>5</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>60</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties/></con:testCase><con:testCase id="3863cd3c-3e64-4b2e-b09c-fb0cd463b03a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="/weather/{city} - test for each supported city" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Expect found weather for Wroclaw" id="424fc352-ccb3-42e2-af69-5c55d39dbcfa"><con:settings/><con:config service="http://localhost:8080" resourcePath="/weather/{city}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Expect found weather for Wroclaw" id="87636551-dcfb-4291-8de2-7c4b5dd1fa08" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/weather/Wroclaw</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="81a909ca-fa80-4178-bfb4-5b35cd72bbfe" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="c39c5f72-3b3a-4c45-a0b8-ac286884ccb7" name="XPath Match"><con:configuration><path>declare namespace n='http://localhost/weather/Wroclaw';
//n:location[1]</path><content>Wroclaw, Poland</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="city" value="Wroclaw" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>city</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Expect found weather for Bielsko-Biala" id="b66d7d46-822d-4eef-8613-95fb02ceafa9"><con:settings/><con:config service="http://localhost:8080" resourcePath="/weather/{city}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Expect found weather for Bielsko-Biala" id="87636551-dcfb-4291-8de2-7c4b5dd1fa08" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/weather/Wroclaw</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="81a909ca-fa80-4178-bfb4-5b35cd72bbfe" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="c39c5f72-3b3a-4c45-a0b8-ac286884ccb7" name="XPath Match"><con:configuration><path>//*:location[1]</path><content>Bielsko-Biala, Poland</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="city" value="Bielsko-Biala" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>city</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Expect found weather for Bialystok" id="9c85ba29-382f-4a23-94c9-53eabbe6fba1"><con:settings/><con:config service="http://localhost:8080" resourcePath="/weather/{city}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Expect found weather for Bialystok" id="87636551-dcfb-4291-8de2-7c4b5dd1fa08" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/weather/Wroclaw</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="81a909ca-fa80-4178-bfb4-5b35cd72bbfe" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="c39c5f72-3b3a-4c45-a0b8-ac286884ccb7" name="XPath Match"><con:configuration><path>//*:location[1]</path><content>Bialystok, Poland</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="city" value="Bialystok" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>city</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Expect found weather for Czestochowa" id="f8cb75f0-d81f-4907-95c3-cc1573be6c8e"><con:settings/><con:config service="http://localhost:8080" resourcePath="/weather/{city}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Expect found weather for Czestochowa" id="87636551-dcfb-4291-8de2-7c4b5dd1fa08" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/weather/Wroclaw</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="81a909ca-fa80-4178-bfb4-5b35cd72bbfe" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="c39c5f72-3b3a-4c45-a0b8-ac286884ccb7" name="XPath Match"><con:configuration><path>//*:location[1]</path><content>Czestochowa, Poland</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="city" value="Czestochowa" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>city</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Expect found weather for Goleniow" id="ef66e25e-a503-491c-8c53-3d974537fb4d"><con:settings/><con:config service="http://localhost:8080" resourcePath="/weather/{city}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Expect found weather for Goleniow" id="87636551-dcfb-4291-8de2-7c4b5dd1fa08" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/weather/Wroclaw</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="81a909ca-fa80-4178-bfb4-5b35cd72bbfe" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="c39c5f72-3b3a-4c45-a0b8-ac286884ccb7" name="XPath Match"><con:configuration><path>//*:location[1]</path><content>Goleniow, Poland</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="city" value="Goleniow" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>city</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:loadTest id="36f738a6-6956-471d-981e-903c19873eef" name="LoadTest each supported city"><con:settings><con:setting id="HttpSettings@close-connections">false</con:setting></con:settings><con:threadCount>5</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>60</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties/></con:testCase><con:testCase id="e79eac9a-ab30-4150-82cd-e117bd1a75a1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="test for an unsupported city" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Expect not found weather for unsupported city" id="8883d64d-e3f7-4600-945e-21df311c7b17"><con:settings/><con:config service="http://localhost:8080" resourcePath="/weather/{city}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Expect not found weather for unsupported city" id="87636551-dcfb-4291-8de2-7c4b5dd1fa08" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/weather/Wroclaw%3B%20Bydgoszcz</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="55feb12e-b271-43f8-8ee9-603d0bfda359" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="city" value="Unsupported" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>city</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:loadTest id="c9fa945b-c0be-40f6-b89b-97d51d0e5415" name="LoadTest unsupported city"><con:settings><con:setting id="HttpSettings@close-connections">false</con:setting></con:settings><con:threadCount>5</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>60</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties/></con:testCase><con:properties/></con:testSuite><con:restMockService id="db042b52-d671-4bbe-8c1f-a056045bafbd" port="8089" path="/" host="WW351732" name="WundergroundMock" docroot=""><con:settings/><con:properties/><con:restMockAction name="Wroclaw" method="GET" resourcePath="/api.wunderground.com/api/b6bfc129d8a2c4ea/conditions/q/Poland/wroclaw.xml" id="a668d8da-5fb7-4ef3-aa04-43962ec84b73"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Wroclaw" id="30924818-5170-40c8-b252-e5b6b3ac441b" httpResponseStatus="200" mediaType="application/xml"><con:settings/><con:responseContent><![CDATA[<response>
	<version>0.1</version>
	<termsofService>http://www.wunderground.com/weather/api/d/terms.html</termsofService>
	<features>
		<feature>conditions</feature>
	</features>
	<current_observation>
		<image>
			<url>http://icons.wxug.com/graphics/wu2/logo_130x80.png</url>
			<title>Weather Underground</title>
			<link>http://www.wunderground.com</link>
		</image>
		<display_location>
			<full>Wroclaw, Poland</full>
			<city>Wroclaw</city>
			<state>DS</state>
			<state_name>Poland</state_name>
			<country>PL</country>
			<country_iso3166>PL</country_iso3166>
			<zip>00000</zip>
			<magic>7</magic>
			<wmo>12424</wmo>
			<latitude>51.11000061</latitude>
			<longitude>17.03000069</longitude>
			<elevation>110.9</elevation>
		</display_location>
		<observation_location>
			<full>Wroclaw, Soltysowice, DS</full>
			<city>Wroclaw, Soltysowice</city>
			<state>DS</state>
			<country>PL</country>
			<country_iso3166>PL</country_iso3166>
			<latitude>51.120853</latitude>
			<longitude>17.059723</longitude>
			<elevation>0 ft</elevation>
		</observation_location>
		<estimated></estimated>
		<station_id>IDSSOLTY2</station_id>
		<observation_time>Last Updated on July 26, 3:26 PM CEST</observation_time>
		<observation_time_rfc822>Wed, 26 Jul 2017 15:26:35 +0200</observation_time_rfc822>
		<observation_epoch>1501075595</observation_epoch>
		<local_time_rfc822>Wed, 26 Jul 2017 15:34:05 +0200</local_time_rfc822>
		<local_epoch>1501076045</local_epoch>
		<local_tz_short>CEST</local_tz_short>
		<local_tz_long>Europe/Warsaw</local_tz_long>
		<local_tz_offset>+0200</local_tz_offset>
		<weather>Partly Cloudy</weather>
		<temperature_string>77.0 F (25.0 C)</temperature_string>
		<temp_f>77.0</temp_f>
		<temp_c>25.0</temp_c>
		<relative_humidity>66%</relative_humidity>
		<wind_string>Calm</wind_string>
		<wind_dir>SE</wind_dir>
		<wind_degrees>135</wind_degrees>
		<wind_mph>0.6</wind_mph>
		<wind_gust_mph>1.2</wind_gust_mph>
		<wind_kph>1.0</wind_kph>
		<wind_gust_kph>1.9</wind_gust_kph>
		<pressure_mb>1001</pressure_mb>
		<pressure_in>29.56</pressure_in>
		<pressure_trend>0</pressure_trend>
		<dewpoint_string>65 F (18 C)</dewpoint_string>
		<dewpoint_f>65</dewpoint_f>
		<dewpoint_c>18</dewpoint_c>
		<heat_index_string>NA</heat_index_string>
		<heat_index_f>NA</heat_index_f>
		<heat_index_c>NA</heat_index_c>
		<windchill_string>NA</windchill_string>
		<windchill_f>NA</windchill_f>
		<windchill_c>NA</windchill_c>
		<feelslike_string>77.0 F (26 C)</feelslike_string>
		<feelslike_f>77.0</feelslike_f>
		<feelslike_c>26</feelslike_c>
		<visibility_mi>6.2</visibility_mi>
		<visibility_km>10.0</visibility_km>
		<solarradiation></solarradiation>
		<UV>5</UV>
		<precip_1hr_string>-999.00 in ( 0 mm)</precip_1hr_string>
		<precip_1hr_in>-999.00</precip_1hr_in>
		<precip_1hr_metric> 0</precip_1hr_metric>
		<precip_today_string>-999.00 in (-25375 mm)</precip_today_string>
		<precip_today_in>-999.00</precip_today_in>
		<precip_today_metric>-25375</precip_today_metric>
		<icon>partlycloudy</icon>
		<icon_url>http://icons.wxug.com/i/c/k/partlycloudy.gif</icon_url>
		<forecast_url>http://www.wunderground.com/global/stations/12424.html</forecast_url>
		<history_url>http://www.wunderground.com/weatherstation/WXDailyHistory.asp?ID=IDSSOLTY2</history_url>
		<ob_url>http://www.wunderground.com/cgi-bin/findweather/getForecast?query=51.120853,17.059723</ob_url>
	</current_observation>
</response>]]></con:responseContent><con:header><con:name>Content-Type</con:name><con:value>application/xml; charset=utf-8</con:value></con:header></con:response></con:restMockAction><con:restMockAction name="Bialystok" method="GET" resourcePath="/api.wunderground.com/api/b6bfc129d8a2c4ea/conditions/q/Poland/bialystok.xml" id="6b5f15bc-a5ba-4c27-afe9-44f57ee05417"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Bialystok" id="76ddf505-6a25-4c8c-b548-f6e24b912f82" httpResponseStatus="200"><con:settings/><con:responseContent><![CDATA[<response>
	<version>0.1</version>
	<termsofService>http://www.wunderground.com/weather/api/d/terms.html</termsofService>
	<features>
		<feature>conditions</feature>
	</features>
  <current_observation>
		<image>
		<url>http://icons.wxug.com/graphics/wu2/logo_130x80.png</url>
		<title>Weather Underground</title>
		<link>http://www.wunderground.com</link>
		</image>
		<display_location>
		<full>Bialystok, Poland</full>
		<city>Bialystok</city>
		<state>PD</state>
		<state_name>Poland</state_name>
		<country>PL</country>
		<country_iso3166>PL</country_iso3166>
		<zip>00000</zip>
		<magic>1245</magic>
		<wmo>12295</wmo>
		<latitude>53.13999939</latitude>
		<longitude>23.15999985</longitude>
		<elevation>171.9</elevation>
		</display_location>
		<observation_location>
		<full>Grodno, </full>
		<city>Grodno</city>
		<state></state>
		<country>BY</country>
		<country_iso3166>PL</country_iso3166>
		<latitude>53.59999847</latitude>
		<longitude>24.04999924</longitude>
		<elevation>443 ft</elevation>
		</observation_location>
		<estimated>
		</estimated>
		<station_id>UMMG</station_id>
		<observation_time>Last Updated on July 26, 4:00 PM +03</observation_time>
		<observation_time_rfc822>Wed, 26 Jul 2017 16:00:00 +0300</observation_time_rfc822>
		<observation_epoch>1501074000</observation_epoch>
		<local_time_rfc822>Wed, 26 Jul 2017 15:56:51 +0200</local_time_rfc822>
		<local_epoch>1501077411</local_epoch>
		<local_tz_short>CEST</local_tz_short>
		<local_tz_long>Europe/Warsaw</local_tz_long>
		<local_tz_offset>+0200</local_tz_offset>
		<weather>Mostly Cloudy</weather>
		<temperature_string>63 F (17 C)</temperature_string>
		<temp_f>63</temp_f>
		<temp_c>17</temp_c>
		<relative_humidity>94%</relative_humidity>
		<wind_string>From the WSW at 9 MPH Gusting to 16 MPH</wind_string>
		<wind_dir>WSW</wind_dir>
		<wind_degrees>250</wind_degrees>
		<wind_mph>9</wind_mph>
		<wind_gust_mph>16</wind_gust_mph>
		<wind_kph>14</wind_kph>
		<wind_gust_kph>25</wind_gust_kph>
		<pressure_mb>999</pressure_mb>
		<pressure_in>29.50</pressure_in>
		<pressure_trend>+</pressure_trend>
		
		<dewpoint_string>61 F (16 C)</dewpoint_string>
		<dewpoint_f>61</dewpoint_f>
		<dewpoint_c>16</dewpoint_c>
		
		
		<heat_index_string>NA</heat_index_string>
		<heat_index_f>NA</heat_index_f>
		<heat_index_c>NA</heat_index_c>
		
		
		<windchill_string>NA</windchill_string>
		<windchill_f>NA</windchill_f>
		<windchill_c>NA</windchill_c>
		
        <feelslike_string>63 F (17 C)</feelslike_string>
        <feelslike_f>63</feelslike_f>
        <feelslike_c>17</feelslike_c>
		<visibility_mi>5.0</visibility_mi>
		<visibility_km>8.0</visibility_km>
		<solarradiation></solarradiation>
		<UV>2</UV>
		<precip_1hr_string>-9999.00 in (-9999.00 mm)</precip_1hr_string>
		<precip_1hr_in>-9999.00</precip_1hr_in>
		<precip_1hr_metric>-9999.00</precip_1hr_metric>
		<precip_today_string>0.00 in (0.0 mm)</precip_today_string>
		<precip_today_in>0.00</precip_today_in>
		<precip_today_metric>0.0</precip_today_metric>
		
		
		
		<icon>mostlycloudy</icon>
		<icon_url>http://icons.wxug.com/i/c/k/mostlycloudy.gif</icon_url>
		<forecast_url>http://www.wunderground.com/global/stations/12295.html</forecast_url>
        
		<history_url>http://www.wunderground.com/history/airport/UMMG/2017/7/26/DailyHistory.html</history_url>
		
		<ob_url>http://www.wunderground.com/cgi-bin/findweather/getForecast?query=53.59999847,24.04999924</ob_url>
	</current_observation>

		
	
	
	
	
    
	
	
		
	

    
    
    
	
  
	
	
	
	
	
    
    


    
    
    
    
</response>]]></con:responseContent></con:response></con:restMockAction><con:restMockAction name="Czestochowa" method="GET" resourcePath="/api.wunderground.com/api/b6bfc129d8a2c4ea/conditions/q/Poland/czestochowa.xml" id="d00ff697-c5d9-4609-91c9-54b066956ca5"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Czestochowa" id="552a1443-f8e3-426f-8e76-fa37ce3e67f8" httpResponseStatus="200"><con:settings/><con:responseContent><![CDATA[<response>
	<version>0.1</version>
	<termsofService>http://www.wunderground.com/weather/api/d/terms.html</termsofService>
	<features>
		<feature>conditions</feature>
	</features>
  <current_observation>
		<image>
		<url>http://icons.wxug.com/graphics/wu2/logo_130x80.png</url>
		<title>Weather Underground</title>
		<link>http://www.wunderground.com</link>
		</image>
		<display_location>
		<full>Czestochowa, Poland</full>
		<city>Czestochowa</city>
		<state>SL</state>
		<state_name>Poland</state_name>
		<country>PL</country>
		<country_iso3166>PL</country_iso3166>
		<zip>00000</zip>
		<magic>484</magic>
		<wmo>12550</wmo>
		<latitude>50.81000137</latitude>
		<longitude>19.12999916</longitude>
		<elevation>269.1</elevation>
		</display_location>
		<observation_location>
		<full>Czestochowa, Srodmiescie, Czestochowa, slaskie</full>
		<city>Czestochowa, Srodmiescie, Czestochowa</city>
		<state>sLaSKIE</state>
		<country>PL</country>
		<country_iso3166>PL</country_iso3166>
		<latitude>50.809349</latitude>
		<longitude>19.111271</longitude>
		<elevation>846 ft</elevation>
		</observation_location>
		<estimated>
		</estimated>
		<station_id>ILSKIECZ2</station_id>
		<observation_time>Last Updated on July 26, 3:53 PM CEST</observation_time>
		<observation_time_rfc822>Wed, 26 Jul 2017 15:53:48 +0200</observation_time_rfc822>
		<observation_epoch>1501077228</observation_epoch>
		<local_time_rfc822>Wed, 26 Jul 2017 15:58:24 +0200</local_time_rfc822>
		<local_epoch>1501077504</local_epoch>
		<local_tz_short>CEST</local_tz_short>
		<local_tz_long>Europe/Warsaw</local_tz_long>
		<local_tz_offset>+0200</local_tz_offset>
		<weather>Partly Cloudy</weather>
		<temperature_string>67.2 F (19.6 C)</temperature_string>
		<temp_f>67.2</temp_f>
		<temp_c>19.6</temp_c>
		<relative_humidity>60%</relative_humidity>
		<wind_string>From the WSW at 10.0 MPH Gusting to 18.0 MPH</wind_string>
		<wind_dir>WSW</wind_dir>
		<wind_degrees>248</wind_degrees>
		<wind_mph>10.0</wind_mph>
		<wind_gust_mph>18.0</wind_gust_mph>
		<wind_kph>16.1</wind_kph>
		<wind_gust_kph>29.0</wind_gust_kph>
		<pressure_mb>1003</pressure_mb>
		<pressure_in>29.62</pressure_in>
		<pressure_trend>0</pressure_trend>
		
		<dewpoint_string>53 F (12 C)</dewpoint_string>
		<dewpoint_f>53</dewpoint_f>
		<dewpoint_c>12</dewpoint_c>
		
		
		<heat_index_string>NA</heat_index_string>
		<heat_index_f>NA</heat_index_f>
		<heat_index_c>NA</heat_index_c>
		
		
		<windchill_string>NA</windchill_string>
		<windchill_f>NA</windchill_f>
		<windchill_c>NA</windchill_c>
		
        <feelslike_string>67.2 F (19.6 C)</feelslike_string>
        <feelslike_f>67.2</feelslike_f>
        <feelslike_c>19.6</feelslike_c>
		<visibility_mi>6.2</visibility_mi>
		<visibility_km>10.0</visibility_km>
		<solarradiation></solarradiation>
		<UV>6</UV>
		<precip_1hr_string>0.00 in ( 0 mm)</precip_1hr_string>
		<precip_1hr_in>0.00</precip_1hr_in>
		<precip_1hr_metric> 0</precip_1hr_metric>
		<precip_today_string>0.00 in (0 mm)</precip_today_string>
		<precip_today_in>0.00</precip_today_in>
		<precip_today_metric>0</precip_today_metric>
		
		
		
		<icon>partlycloudy</icon>
		<icon_url>http://icons.wxug.com/i/c/k/partlycloudy.gif</icon_url>
		<forecast_url>http://www.wunderground.com/global/stations/12550.html</forecast_url>
        
        <history_url>http://www.wunderground.com/weatherstation/WXDailyHistory.asp?ID=ILSKIECZ2</history_url>
        
		<ob_url>http://www.wunderground.com/cgi-bin/findweather/getForecast?query=50.809349,19.111271</ob_url>
	</current_observation>

		
	
	
	
	
    
	
	
		
	

    
    
    
	
  
	
	
	
	
	
    
    


    
    
    
    
</response>]]></con:responseContent></con:response></con:restMockAction><con:restMockAction name="Bielsko-Biala" method="GET" resourcePath="/api.wunderground.com/api/b6bfc129d8a2c4ea/conditions/q/Poland/bielsko-biala.xml" id="d8eded75-5eef-4e12-a431-63771cd41af2"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Bielsko-Biala" id="5d4ba1e7-ae71-45d7-8f94-c2b9456efc67" httpResponseStatus="200"><con:settings/><con:responseContent><![CDATA[<response>
	<version>0.1</version>
	<termsofService>http://www.wunderground.com/weather/api/d/terms.html</termsofService>
	<features>
		<feature>conditions</feature>
	</features>
  <current_observation>
		<image>
		<url>http://icons.wxug.com/graphics/wu2/logo_130x80.png</url>
		<title>Weather Underground</title>
		<link>http://www.wunderground.com</link>
		</image>
		<display_location>
		<full>Bielsko-Biala, Poland</full>
		<city>Bielsko-Biala</city>
		<state>SL</state>
		<state_name>Poland</state_name>
		<country>PL</country>
		<country_iso3166>PL</country_iso3166>
		<zip>00000</zip>
		<magic>70</magic>
		<wmo>12600</wmo>
		<latitude>49.81999969</latitude>
		<longitude>19.04999924</longitude>
		<elevation>319.1</elevation>
		</display_location>
		<observation_location>
		<full>Lipnik, Bielsko-Biala, sLaSKIE</full>
		<city>Lipnik, Bielsko-Biala</city>
		<state>sLaSKIE</state>
		<country>PL</country>
		<country_iso3166>PL</country_iso3166>
		<latitude>49.814392</latitude>
		<longitude>19.061140</longitude>
		<elevation>1000 ft</elevation>
		</observation_location>
		<estimated>
		</estimated>
		<station_id>ILSKIEBI5</station_id>
		<observation_time>Last Updated on July 26, 3:57 PM CEST</observation_time>
		<observation_time_rfc822>Wed, 26 Jul 2017 15:57:00 +0200</observation_time_rfc822>
		<observation_epoch>1501077420</observation_epoch>
		<local_time_rfc822>Wed, 26 Jul 2017 16:00:12 +0200</local_time_rfc822>
		<local_epoch>1501077612</local_epoch>
		<local_tz_short>CEST</local_tz_short>
		<local_tz_long>Europe/Warsaw</local_tz_long>
		<local_tz_offset>+0200</local_tz_offset>
		<weather>Mostly Cloudy</weather>
		<temperature_string>69.4 F (20.8 C)</temperature_string>
		<temp_f>69.4</temp_f>
		<temp_c>20.8</temp_c>
		<relative_humidity>55%</relative_humidity>
		<wind_string>From the WSW at 4.9 MPH Gusting to 11.2 MPH</wind_string>
		<wind_dir>WSW</wind_dir>
		<wind_degrees>245</wind_degrees>
		<wind_mph>4.9</wind_mph>
		<wind_gust_mph>11.2</wind_gust_mph>
		<wind_kph>7.9</wind_kph>
		<wind_gust_kph>18.0</wind_gust_kph>
		<pressure_mb>1003</pressure_mb>
		<pressure_in>29.62</pressure_in>
		<pressure_trend>0</pressure_trend>
		
		<dewpoint_string>51 F (11 C)</dewpoint_string>
		<dewpoint_f>51</dewpoint_f>
		<dewpoint_c>11</dewpoint_c>
		
		
		<heat_index_string>NA</heat_index_string>
		<heat_index_f>NA</heat_index_f>
		<heat_index_c>NA</heat_index_c>
		
		
		<windchill_string>NA</windchill_string>
		<windchill_f>NA</windchill_f>
		<windchill_c>NA</windchill_c>
		
        <feelslike_string>69.4 F (20.8 C)</feelslike_string>
        <feelslike_f>69.4</feelslike_f>
        <feelslike_c>20.8</feelslike_c>
		<visibility_mi>6.2</visibility_mi>
		<visibility_km>10.0</visibility_km>
		<solarradiation></solarradiation>
		<UV>6</UV>
		<precip_1hr_string>-999.00 in ( 0 mm)</precip_1hr_string>
		<precip_1hr_in>-999.00</precip_1hr_in>
		<precip_1hr_metric> 0</precip_1hr_metric>
		<precip_today_string>-999.00 in (-25375 mm)</precip_today_string>
		<precip_today_in>-999.00</precip_today_in>
		<precip_today_metric>-25375</precip_today_metric>
		
		
		
		<icon>mostlycloudy</icon>
		<icon_url>http://icons.wxug.com/i/c/k/mostlycloudy.gif</icon_url>
		<forecast_url>http://www.wunderground.com/global/stations/12600.html</forecast_url>
        
        <history_url>http://www.wunderground.com/weatherstation/WXDailyHistory.asp?ID=ILSKIEBI5</history_url>
        
		<ob_url>http://www.wunderground.com/cgi-bin/findweather/getForecast?query=49.814392,19.061140</ob_url>
	</current_observation>

		
	
	
	
	
    
	
	
		
	

    
    
    
	
  
	
	
	
	
	
    
    


    
    
    
    
</response>]]></con:responseContent></con:response></con:restMockAction><con:restMockAction name="Goleniow" method="GET" resourcePath="/api.wunderground.com/api/b6bfc129d8a2c4ea/conditions/q/Poland/goleniow.xml" id="62addae8-3d5b-46f1-a1ff-925acaa3ec90"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Goleniow" id="ce64f2bc-1cea-45b1-ab8e-80e245ecaec3" httpResponseStatus="200"><con:settings/><con:responseContent><![CDATA[<response>
	<version>0.1</version>
	<termsofService>http://www.wunderground.com/weather/api/d/terms.html</termsofService>
	<features>
		<feature>conditions</feature>
	</features>
  <current_observation>
		<image>
		<url>http://icons.wxug.com/graphics/wu2/logo_130x80.png</url>
		<title>Weather Underground</title>
		<link>http://www.wunderground.com</link>
		</image>
		<display_location>
		<full>Goleniow, Poland</full>
		<city>Goleniow</city>
		<state>ZP</state>
		<state_name>Poland</state_name>
		<country>PL</country>
		<country_iso3166>PL</country_iso3166>
		<zip>00000</zip>
		<magic>1</magic>
		<wmo>12206</wmo>
		<latitude>53.56999969</latitude>
		<longitude>14.81999969</longitude>
		<elevation>14.0</elevation>
		</display_location>
		<observation_location>
		<full>Czarna Laka Plaza, Czarna Laka, WOJEWoDZTWO ZACHODNIOPOMORSKIE</full>
		<city>Czarna Laka Plaza, Czarna Laka</city>
		<state>WOJEWoDZTWO ZACHODNIOPOMORSKIE</state>
		<country>PL</country>
		<country_iso3166>PL</country_iso3166>
		<latitude>53.461506</latitude>
		<longitude>14.711327</longitude>
		<elevation>26 ft</elevation>
		</observation_location>
		<estimated>
		</estimated>
		<station_id>IWOJEWDZ5</station_id>
		<observation_time>Last Updated on July 26, 3:49 PM CEST</observation_time>
		<observation_time_rfc822>Wed, 26 Jul 2017 15:49:45 +0200</observation_time_rfc822>
		<observation_epoch>1501076985</observation_epoch>
		<local_time_rfc822>Wed, 26 Jul 2017 16:00:44 +0200</local_time_rfc822>
		<local_epoch>1501077644</local_epoch>
		<local_tz_short>CEST</local_tz_short>
		<local_tz_long>Europe/Warsaw</local_tz_long>
		<local_tz_offset>+0200</local_tz_offset>
		<weather>Rain</weather>
		<temperature_string>62.9 F (17.2 C)</temperature_string>
		<temp_f>62.9</temp_f>
		<temp_c>17.2</temp_c>
		<relative_humidity>97%</relative_humidity>
		<wind_string>From the WNW at 3.0 MPH Gusting to 5.0 MPH</wind_string>
		<wind_dir>WNW</wind_dir>
		<wind_degrees>286</wind_degrees>
		<wind_mph>3.0</wind_mph>
		<wind_gust_mph>5.0</wind_gust_mph>
		<wind_kph>4.8</wind_kph>
		<wind_gust_kph>8.0</wind_gust_kph>
		<pressure_mb>1000</pressure_mb>
		<pressure_in>29.53</pressure_in>
		<pressure_trend>0</pressure_trend>
		
		<dewpoint_string>62 F (17 C)</dewpoint_string>
		<dewpoint_f>62</dewpoint_f>
		<dewpoint_c>17</dewpoint_c>
		
		
		<heat_index_string>NA</heat_index_string>
		<heat_index_f>NA</heat_index_f>
		<heat_index_c>NA</heat_index_c>
		
		
		<windchill_string>NA</windchill_string>
		<windchill_f>NA</windchill_f>
		<windchill_c>NA</windchill_c>
		
        <feelslike_string>62.9 F (17.2 C)</feelslike_string>
        <feelslike_f>62.9</feelslike_f>
        <feelslike_c>17.2</feelslike_c>
		<visibility_mi>3.1</visibility_mi>
		<visibility_km>5.0</visibility_km>
		<solarradiation>42</solarradiation>
		<UV>0.0</UV>
		<precip_1hr_string>0.09 in ( 2 mm)</precip_1hr_string>
		<precip_1hr_in>0.09</precip_1hr_in>
		<precip_1hr_metric> 2</precip_1hr_metric>
		<precip_today_string>0.25 in (6 mm)</precip_today_string>
		<precip_today_in>0.25</precip_today_in>
		<precip_today_metric>6</precip_today_metric>
		
		
		
		<icon>rain</icon>
		<icon_url>http://icons.wxug.com/i/c/k/rain.gif</icon_url>
		<forecast_url>http://www.wunderground.com/global/stations/12206.html</forecast_url>
        
        <history_url>http://www.wunderground.com/weatherstation/WXDailyHistory.asp?ID=IWOJEWDZ5</history_url>
        
		<ob_url>http://www.wunderground.com/cgi-bin/findweather/getForecast?query=53.461506,14.711327</ob_url>
	</current_observation>

		
	
	
	
	
    
	
	
		
	

    
    
    
	
  
	
	
	
	
	
    
    


    
    
    
    
</response>]]></con:responseContent></con:response></con:restMockAction><con:restMockAction name="PolandAnything" method="GET" resourcePath="/api.wunderground.com/api/b6bfc129d8a2c4ea/conditions/q/Poland/" id="eac320ad-99a8-4bee-ad51-f1b174d30a89"><con:settings/><con:defaultResponse>Error</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Error" id="1db3d98a-95f5-45d6-bf29-c8aa4e66faf7" httpResponseStatus="404"><con:settings/><con:responseContent><![CDATA[<response>
<version>0.1</version>
<termsofService>
http://www.wunderground.com/weather/api/d/terms.html
</termsofService>
<features>
<feature>conditions</feature>
</features>
<error>
<type>querynotfound</type>
<description>No cities match your search query</description>
</error>
</response>]]></con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/></con:soapui-project>